from aiogram import Bot, types, F
from aiogram.enums import ContentType, ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import json

# –®–∞–≥ 1. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async def handle(bot: Bot, message: types.Message):
    builder = InlineKeyboardBuilder()
    options = [
        ("üé® –ò–Ω—Ç–µ–Ω—Å–∏–≤", "gift_cert_intensive"),
        ("üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "gift_cert_event"),
        ("üíº –ö–æ–≤–æ—Ä–∫–∏–Ω–≥", "gift_cert_kovorking"),
        ("üíå –°–≤–∏–¥–∞–Ω–∏–µ", "gift_cert_date"),
        ("üë©‚Äçüè´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å", "gift_cert_individual")
    ]

    for text, callback_data in options:
        builder.add(types.InlineKeyboardButton(text=text, callback_data=callback_data))
    builder.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", reply_markup=builder.as_markup())

# –®–∞–≥ 2. –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ WebApp –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
async def show_webapp_button_handler(callback: types.CallbackQuery):
    cert_type_map = {
        "gift_cert_intensive": "–ò–Ω—Ç–µ–Ω—Å–∏–≤",
        "gift_cert_event": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
        "gift_cert_kovorking": "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥",
        "gift_cert_date": "–°–≤–∏–¥–∞–Ω–∏–µ",
        "gift_cert_individual": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å"
    }

    cert_type = cert_type_map.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    webapp_keyboard = ReplyKeyboardBuilder()
    webapp_keyboard.add(
        types.KeyboardButton(
            text="üåê –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            web_app=types.WebAppInfo(url=f"https://strangepineaplle.github.io/lobzik-web/?cert_type={cert_type}")
        )
    )

    await callback.message.edit_reply_markup()
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: <b>{cert_type}</b>\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:",
        parse_mode=ParseMode.HTML,
        reply_markup=webapp_keyboard.as_markup(resize_keyboard=True)
    )
    await callback.answer()

# –®–∞–≥ 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        file_path = "gift_certificates.json"

        record = {
            "tg_id": message.from_user.id,
            "tg_username": message.from_user.username or "",
            "full_name": data.get("full_name", ""),
            "user_phone": data.get("user_phone", ""),
            "user_email": data.get("user_email", ""),
            "cert_type": data.get("cert_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        }

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                existing = json.load(f)
                if not isinstance(existing, list):
                    existing = [existing]
        except (FileNotFoundError, json.JSONDecodeError):
            existing = []

        existing.append(record)

        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(existing, f, ensure_ascii=False, indent=2)

        await message.answer(
            f"üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: <b>{record['cert_type']}</b>\n\n"
            f"üë§ {record['full_name']}\nüìû {record['user_phone']}\nüìß {record['user_email']}",
            parse_mode=ParseMode.HTML
        )
        await message.answer("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
