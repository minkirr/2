from aiogram import Bot, types, F
from aiogram.enums import ContentType, ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import json
import os

# –•–µ–Ω–¥–ª–µ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å"
async def handle(bot: Bot, message: types.Message):
    show_button_builder = InlineKeyboardBuilder()
    show_button_builder.add(
        types.InlineKeyboardButton(
            text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏",
            callback_data="show_individual_webapp_button"
        )
    )

    await message.answer(
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=show_button_builder.as_markup()
    )

# Callback: –ø–æ–∫–∞–∑–∞—Ç—å WebApp-–∫–Ω–æ–ø–∫—É
async def show_webapp_button_handler(callback: types.CallbackQuery):
    webapp_keyboard = ReplyKeyboardBuilder()
    webapp_keyboard.add(
        types.KeyboardButton(
            text="üåê –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            web_app=types.WebAppInfo(url="https://strangepineaplle.github.io/lobzik-web/")
        )
    )

    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=webapp_keyboard.as_markup(resize_keyboard=True)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ database.json
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ message –∏ –∏–∑ —Ñ–æ—Ä–º—ã WebApp
        user_data = {
            "tg_id": message.from_user.id,
            "tg_username": message.from_user.username,
            "full_name": data.get("full_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            "user_phone": data.get("phone", ""),
            "user_email": data.get("email", "")
        }

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = "database.json"
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                existing_data = json.load(f)
                if not isinstance(existing_data, list):
                    existing_data = [existing_data]
        except (FileNotFoundError, json.JSONDecodeError):
            existing_data = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        existing_data.append(user_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)

        formatted = (
            f'üìå <b>{data.get("full_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")}</b>\n\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω")}\n'
            f'üìß Email: {data.get("email", "–Ω–µ —É–∫–∞–∑–∞–Ω")}'
        )

        await message.answer(formatted, parse_mode=ParseMode.HTML)
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
