import logging
import json
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ContentType, ParseMode
from aiogram.filters import CommandStart
import nest_asyncio

logging.basicConfig(level=logging.INFO)

TOKEN = "7399282843:AAF85bKUZdZzHTbSSJOVt8dQFjpILv9UxIU"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
show_button_builder = InlineKeyboardBuilder()
show_button_builder.add(
    types.InlineKeyboardButton(
        text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏",
        callback_data="show_webapp_button"
    )
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp
webapp_keyboard = ReplyKeyboardBuilder()
webapp_keyboard.add(
    types.KeyboardButton(
        text="üåê –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        web_app=types.WebAppInfo(url="https://strangepineaplle.github.io/lobzik-web/")
    )
)

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=show_button_builder.as_markup()
    )

@dp.callback_query(F.data == "show_webapp_button")
async def show_webapp_button_handler(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫—É
    await callback.message.answer(
        "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=webapp_keyboard.as_markup(resize_keyboard=True)
    )
    await callback.answer()

@dp.message(F.content_type == ContentType.WEB_APP_DATA)
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        formatted = f'üìå {data["title"]}\n\nüìù {data["desc"]}\n\n{data["text"]}'

        with open('data.txt', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        await message.answer(formatted, parse_mode=ParseMode.HTML)
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

async def main():
    print("bot started")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    nest_asyncio.apply()

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")