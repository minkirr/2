7561870576:AAHSEpjx1nNH4aa6WBwNEe3MQzmWSsKUOCA

from telegram_token import TELEGRAM_TOKEN
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.web_app import check_webapp_signature


bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=types.WebAppInfo(url="https://minkirr.github.io/web2/")
        )
    ]])
    await message.answer("–¢–µ—Å—Ç WebApp:", reply_markup=kb)

@dp.message()
async def handle_all_messages(message: types.Message):
    print(f"\n{'='*40}\n–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(f"–¢–∏–ø: {message.content_type}")
    print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(message.dict(), indent=2, ensure_ascii=False)}")


    if message.web_app_data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebApp –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ message.web_app_data
            webapp_data = message.web_app_data.data
            print(f"WebApp –¥–∞–Ω–Ω—ã–µ (—Å—ã—Ä—ã–µ): {webapp_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            init_data = message.web_app_data.web_app_init_data
            if init_data and not check_webapp_signature(TELEGRAM_TOKEN, init_data):
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WebApp")
                return
            
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            parsed_data = json.loads(webapp_data)
            print(f"WebApp –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ): {parsed_data}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open("received_data.txt", "a", encoding="utf-8") as f:
                f.write(f"{message.from_user.id}: {parsed_data}\n")
                
            await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ WebApp:\n{json.dumps(parsed_data, indent=2, ensure_ascii=False)}")
            
        except json.JSONDecodeError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –¥–∞–Ω–Ω—ã—Ö WebApp")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        print("–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await message.answer(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {message.text}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())